/**
 * Minified by jsDelivr using Terser v5.37.0.
 * Original file: /npm/@splidejs/splide@4.1.4/dist/js/splide.esm.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
function _defineProperties(t, e) {
  for (var n = 0; n < e.length; n++) {
    var i = e[n];
    (i.enumerable = i.enumerable || !1),
      (i.configurable = !0),
      'value' in i && (i.writable = !0),
      Object.defineProperty(t, i.key, i);
  }
}
function _createClass(t, e, n) {
  return (
    e && _defineProperties(t.prototype, e),
    n && _defineProperties(t, n),
    Object.defineProperty(t, 'prototype', { writable: !1 }),
    t
  );
}
/*!
 * Splide.js
 * Version  : 4.1.4
 * License  : MIT
 * Copyright: 2022 Naotoshi Fujita
 */ var MEDIA_PREFERS_REDUCED_MOTION = '(prefers-reduced-motion: reduce)',
  CREATED = 1,
  MOUNTED = 2,
  IDLE = 3,
  MOVING = 4,
  SCROLLING = 5,
  DRAGGING = 6,
  DESTROYED = 7,
  STATES = {
    CREATED: CREATED,
    MOUNTED: MOUNTED,
    IDLE: IDLE,
    MOVING: MOVING,
    SCROLLING: SCROLLING,
    DRAGGING: DRAGGING,
    DESTROYED: DESTROYED,
  };
function empty(t) {
  t.length = 0;
}
function slice(t, e, n) {
  return Array.prototype.slice.call(t, e, n);
}
function apply(t) {
  return t.bind.apply(t, [null].concat(slice(arguments, 1)));
}
var nextTick = setTimeout,
  noop = function () {};
function raf(t) {
  return requestAnimationFrame(t);
}
function typeOf(t, e) {
  return typeof e === t;
}
function isObject(t) {
  return !isNull(t) && typeOf('object', t);
}
var isArray = Array.isArray,
  isFunction = apply(typeOf, 'function'),
  isString = apply(typeOf, 'string'),
  isUndefined = apply(typeOf, 'undefined');
function isNull(t) {
  return null === t;
}
function isHTMLElement(t) {
  try {
    return t instanceof (t.ownerDocument.defaultView || window).HTMLElement;
  } catch (t) {
    return !1;
  }
}
function toArray(t) {
  return isArray(t) ? t : [t];
}
function forEach(t, e) {
  toArray(t).forEach(e);
}
function includes(t, e) {
  return t.indexOf(e) > -1;
}
function push(t, e) {
  return t.push.apply(t, toArray(e)), t;
}
function toggleClass(t, e, n) {
  t &&
    forEach(e, function (e) {
      e && t.classList[n ? 'add' : 'remove'](e);
    });
}
function addClass(t, e) {
  toggleClass(t, isString(e) ? e.split(' ') : e, !0);
}
function append(t, e) {
  forEach(e, t.appendChild.bind(t));
}
function before(t, e) {
  forEach(t, function (t) {
    var n = (e || t).parentNode;
    n && n.insertBefore(t, e);
  });
}
function matches(t, e) {
  return isHTMLElement(t) && (t.msMatchesSelector || t.matches).call(t, e);
}
function children(t, e) {
  var n = t ? slice(t.children) : [];
  return e
    ? n.filter(function (t) {
        return matches(t, e);
      })
    : n;
}
function child(t, e) {
  return e ? children(t, e)[0] : t.firstElementChild;
}
var ownKeys = Object.keys;
function forOwn(t, e, n) {
  return (
    t &&
      (n ? ownKeys(t).reverse() : ownKeys(t)).forEach(function (n) {
        '__proto__' !== n && e(t[n], n);
      }),
    t
  );
}
function assign(t) {
  return (
    slice(arguments, 1).forEach(function (e) {
      forOwn(e, function (n, i) {
        t[i] = e[i];
      });
    }),
    t
  );
}
function merge(t) {
  return (
    slice(arguments, 1).forEach(function (e) {
      forOwn(e, function (e, n) {
        isArray(e) ? (t[n] = e.slice()) : isObject(e) ? (t[n] = merge({}, isObject(t[n]) ? t[n] : {}, e)) : (t[n] = e);
      });
    }),
    t
  );
}
function omit(t, e) {
  forEach(e || ownKeys(t), function (e) {
    delete t[e];
  });
}
function removeAttribute(t, e) {
  forEach(t, function (t) {
    forEach(e, function (e) {
      t && t.removeAttribute(e);
    });
  });
}
function setAttribute(t, e, n) {
  isObject(e)
    ? forOwn(e, function (e, n) {
        setAttribute(t, n, e);
      })
    : forEach(t, function (t) {
        isNull(n) || '' === n ? removeAttribute(t, e) : t.setAttribute(e, String(n));
      });
}
function create(t, e, n) {
  var i = document.createElement(t);
  return e && (isString(e) ? addClass(i, e) : setAttribute(i, e)), n && append(n, i), i;
}
function style(t, e, n) {
  if (isUndefined(n)) return getComputedStyle(t)[e];
  isNull(n) || (t.style[e] = '' + n);
}
function display(t, e) {
  style(t, 'display', e);
}
function focus(t) {
  (t.setActive && t.setActive()) || t.focus({ preventScroll: !0 });
}
function getAttribute(t, e) {
  return t.getAttribute(e);
}
function hasClass(t, e) {
  return t && t.classList.contains(e);
}
function rect(t) {
  return t.getBoundingClientRect();
}
function remove(t) {
  forEach(t, function (t) {
    t && t.parentNode && t.parentNode.removeChild(t);
  });
}
function parseHtml(t) {
  return child(new DOMParser().parseFromString(t, 'text/html').body);
}
function prevent(t, e) {
  t.preventDefault(), e && (t.stopPropagation(), t.stopImmediatePropagation());
}
function query(t, e) {
  return t && t.querySelector(e);
}
function queryAll(t, e) {
  return e ? slice(t.querySelectorAll(e)) : [];
}
function removeClass(t, e) {
  toggleClass(t, e, !1);
}
function timeOf(t) {
  return t.timeStamp;
}
function unit(t) {
  return isString(t) ? t : t ? t + 'px' : '';
}
var PROJECT_CODE = 'splide',
  DATA_ATTRIBUTE = 'data-' + PROJECT_CODE;
function assert(t, e) {
  if (!t) throw new Error('[' + PROJECT_CODE + '] ' + (e || ''));
}
var min = Math.min,
  max = Math.max,
  floor = Math.floor,
  ceil = Math.ceil,
  abs = Math.abs;
function approximatelyEqual(t, e, n) {
  return abs(t - e) < n;
}
function between(t, e, n, i) {
  var r = min(e, n),
    o = max(e, n);
  return i ? r < t && t < o : r <= t && t <= o;
}
function clamp(t, e, n) {
  var i = min(e, n),
    r = max(e, n);
  return min(max(i, t), r);
}
function sign(t) {
  return +(t > 0) - +(t < 0);
}
function camelToKebab(t) {
  return t.replace(/([a-z0-9])([A-Z])/g, '$1-$2').toLowerCase();
}
function format(t, e) {
  return (
    forEach(e, function (e) {
      t = t.replace('%s', '' + e);
    }),
    t
  );
}
function pad(t) {
  return t < 10 ? '0' + t : '' + t;
}
var ids = {};
function uniqueId(t) {
  return '' + t + pad((ids[t] = (ids[t] || 0) + 1));
}
function EventBinder() {
  var t = [];
  function e(t, e, n) {
    forEach(t, function (t) {
      t &&
        forEach(e, function (e) {
          e.split(' ').forEach(function (e) {
            var i = e.split('.');
            n(t, i[0], i[1]);
          });
        });
    });
  }
  return {
    bind: function (n, i, r, o) {
      e(n, i, function (e, n, i) {
        var s = 'addEventListener' in e,
          a = s ? e.removeEventListener.bind(e, n, r, o) : e.removeListener.bind(e, r);
        s ? e.addEventListener(n, r, o) : e.addListener(r), t.push([e, n, i, r, a]);
      });
    },
    unbind: function (n, i, r) {
      e(n, i, function (e, n, i) {
        t = t.filter(function (t) {
          return !!(t[0] !== e || t[1] !== n || t[2] !== i || (r && t[3] !== r)) || (t[4](), !1);
        });
      });
    },
    dispatch: function (t, e, n) {
      var i,
        r = !0;
      return (
        'function' == typeof CustomEvent
          ? (i = new CustomEvent(e, { bubbles: r, detail: n }))
          : (i = document.createEvent('CustomEvent')).initCustomEvent(e, r, !1, n),
        t.dispatchEvent(i),
        i
      );
    },
    destroy: function () {
      t.forEach(function (t) {
        t[4]();
      }),
        empty(t);
    },
  };
}
var EVENT_MOUNTED = 'mounted',
  EVENT_READY = 'ready',
  EVENT_MOVE = 'move',
  EVENT_MOVED = 'moved',
  EVENT_CLICK = 'click',
  EVENT_ACTIVE = 'active',
  EVENT_INACTIVE = 'inactive',
  EVENT_VISIBLE = 'visible',
  EVENT_HIDDEN = 'hidden',
  EVENT_REFRESH = 'refresh',
  EVENT_UPDATED = 'updated',
  EVENT_RESIZE = 'resize',
  EVENT_RESIZED = 'resized',
  EVENT_DRAG = 'drag',
  EVENT_DRAGGING = 'dragging',
  EVENT_DRAGGED = 'dragged',
  EVENT_SCROLL = 'scroll',
  EVENT_SCROLLED = 'scrolled',
  EVENT_OVERFLOW = 'overflow',
  EVENT_DESTROY = 'destroy',
  EVENT_ARROWS_MOUNTED = 'arrows:mounted',
  EVENT_ARROWS_UPDATED = 'arrows:updated',
  EVENT_PAGINATION_MOUNTED = 'pagination:mounted',
  EVENT_PAGINATION_UPDATED = 'pagination:updated',
  EVENT_NAVIGATION_MOUNTED = 'navigation:mounted',
  EVENT_AUTOPLAY_PLAY = 'autoplay:play',
  EVENT_AUTOPLAY_PLAYING = 'autoplay:playing',
  EVENT_AUTOPLAY_PAUSE = 'autoplay:pause',
  EVENT_LAZYLOAD_LOADED = 'lazyload:loaded',
  EVENT_SLIDE_KEYDOWN = 'sk',
  EVENT_SHIFTED = 'sh',
  EVENT_END_INDEX_CHANGED = 'ei';
function EventInterface(t) {
  var e = t ? t.event.bus : document.createDocumentFragment(),
    n = EventBinder();
  return (
    t && t.event.on(EVENT_DESTROY, n.destroy),
    assign(n, {
      bus: e,
      on: function (t, i) {
        n.bind(e, toArray(t).join(' '), function (t) {
          i.apply(i, isArray(t.detail) ? t.detail : []);
        });
      },
      off: apply(n.unbind, e),
      emit: function (t) {
        n.dispatch(e, t, slice(arguments, 1));
      },
    })
  );
}
function RequestInterval(t, e, n, i) {
  var r,
    o,
    s = Date.now,
    a = 0,
    E = !0,
    u = 0;
  function c() {
    if (!E) {
      if (((a = t ? min((s() - r) / t, 1) : 1), n && n(a), a >= 1 && (e(), (r = s()), i && ++u >= i))) return l();
      o = raf(c);
    }
  }
  function l() {
    E = !0;
  }
  function A() {
    o && cancelAnimationFrame(o), (a = 0), (o = 0), (E = !0);
  }
  return {
    start: function (e) {
      e || A(), (r = s() - (e ? a * t : 0)), (E = !1), (o = raf(c));
    },
    rewind: function () {
      (r = s()), (a = 0), n && n(a);
    },
    pause: l,
    cancel: A,
    set: function (e) {
      t = e;
    },
    isPaused: function () {
      return E;
    },
  };
}
function State(t) {
  var e = t;
  return {
    set: function (t) {
      e = t;
    },
    is: function (t) {
      return includes(toArray(t), e);
    },
  };
}
function Throttle(t, e) {
  var n = RequestInterval(e || 0, t, null, 1);
  return function () {
    n.isPaused() && n.start();
  };
}
function Media(t, e, n) {
  var i = t.state,
    r = n.breakpoints || {},
    o = n.reducedMotion || {},
    s = EventBinder(),
    a = [];
  function E(t) {
    t && s.destroy();
  }
  function u(t, e) {
    var n = matchMedia(e);
    s.bind(n, 'change', c), a.push([t, n]);
  }
  function c() {
    var e = i.is(DESTROYED),
      r = n.direction,
      o = a.reduce(function (t, e) {
        return merge(t, e[1].matches ? e[0] : {});
      }, {});
    omit(n),
      l(o),
      n.destroy ? t.destroy('completely' === n.destroy) : e ? (E(!0), t.mount()) : r !== n.direction && t.refresh();
  }
  function l(e, r, o) {
    merge(n, e), r && merge(Object.getPrototypeOf(n), e), (!o && i.is(CREATED)) || t.emit(EVENT_UPDATED, n);
  }
  return {
    setup: function () {
      var t = 'min' === n.mediaQuery;
      ownKeys(r)
        .sort(function (e, n) {
          return t ? +e - +n : +n - +e;
        })
        .forEach(function (e) {
          u(r[e], '(' + (t ? 'min' : 'max') + '-width:' + e + 'px)');
        }),
        u(o, MEDIA_PREFERS_REDUCED_MOTION),
        c();
    },
    destroy: E,
    reduce: function (t) {
      matchMedia(MEDIA_PREFERS_REDUCED_MOTION).matches && (t ? merge(n, o) : omit(n, ownKeys(o)));
    },
    set: l,
  };
}
var ARROW = 'Arrow',
  ARROW_LEFT = ARROW + 'Left',
  ARROW_RIGHT = ARROW + 'Right',
  ARROW_UP = ARROW + 'Up',
  ARROW_DOWN = ARROW + 'Down',
  LTR = 'ltr',
  RTL = 'rtl',
  TTB = 'ttb',
  ORIENTATION_MAP = {
    width: ['height'],
    left: ['top', 'right'],
    right: ['bottom', 'left'],
    x: ['y'],
    X: ['Y'],
    Y: ['X'],
    ArrowLeft: [ARROW_UP, ARROW_RIGHT],
    ArrowRight: [ARROW_DOWN, ARROW_LEFT],
  };
function Direction(t, e, n) {
  return {
    resolve: function (t, e, i) {
      var r = (i = i || n.direction) !== RTL || e ? (i === TTB ? 0 : -1) : 1;
      return (
        (ORIENTATION_MAP[t] && ORIENTATION_MAP[t][r]) ||
        t.replace(/width|left|right/i, function (t, e) {
          var n = ORIENTATION_MAP[t.toLowerCase()][r] || t;
          return e > 0 ? n.charAt(0).toUpperCase() + n.slice(1) : n;
        })
      );
    },
    orient: function (t) {
      return t * (n.direction === RTL ? 1 : -1);
    },
  };
}
var ROLE = 'role',
  TAB_INDEX = 'tabindex',
  DISABLED = 'disabled',
  ARIA_PREFIX = 'aria-',
  ARIA_CONTROLS = ARIA_PREFIX + 'controls',
  ARIA_CURRENT = ARIA_PREFIX + 'current',
  ARIA_SELECTED = ARIA_PREFIX + 'selected',
  ARIA_LABEL = ARIA_PREFIX + 'label',
  ARIA_LABELLEDBY = ARIA_PREFIX + 'labelledby',
  ARIA_HIDDEN = ARIA_PREFIX + 'hidden',
  ARIA_ORIENTATION = ARIA_PREFIX + 'orientation',
  ARIA_ROLEDESCRIPTION = ARIA_PREFIX + 'roledescription',
  ARIA_LIVE = ARIA_PREFIX + 'live',
  ARIA_BUSY = ARIA_PREFIX + 'busy',
  ARIA_ATOMIC = ARIA_PREFIX + 'atomic',
  ALL_ATTRIBUTES = [
    ROLE,
    TAB_INDEX,
    DISABLED,
    ARIA_CONTROLS,
    ARIA_CURRENT,
    ARIA_LABEL,
    ARIA_LABELLEDBY,
    ARIA_HIDDEN,
    ARIA_ORIENTATION,
    ARIA_ROLEDESCRIPTION,
  ],
  CLASS_PREFIX = PROJECT_CODE + '__',
  STATUS_CLASS_PREFIX = 'is-',
  CLASS_ROOT = PROJECT_CODE,
  CLASS_TRACK = CLASS_PREFIX + 'track',
  CLASS_LIST = CLASS_PREFIX + 'list',
  CLASS_SLIDE = CLASS_PREFIX + 'slide',
  CLASS_CLONE = CLASS_SLIDE + '--clone',
  CLASS_CONTAINER = CLASS_SLIDE + '__container',
  CLASS_ARROWS = CLASS_PREFIX + 'arrows',
  CLASS_ARROW = CLASS_PREFIX + 'arrow',
  CLASS_ARROW_PREV = CLASS_ARROW + '--prev',
  CLASS_ARROW_NEXT = CLASS_ARROW + '--next',
  CLASS_PAGINATION = CLASS_PREFIX + 'pagination',
  CLASS_PAGINATION_PAGE = CLASS_PAGINATION + '__page',
  CLASS_PROGRESS = CLASS_PREFIX + 'progress',
  CLASS_PROGRESS_BAR = CLASS_PROGRESS + '__bar',
  CLASS_TOGGLE = CLASS_PREFIX + 'toggle',
  CLASS_TOGGLE_PLAY = CLASS_TOGGLE + '__play',
  CLASS_TOGGLE_PAUSE = CLASS_TOGGLE + '__pause',
  CLASS_SPINNER = CLASS_PREFIX + 'spinner',
  CLASS_SR = CLASS_PREFIX + 'sr',
  CLASS_INITIALIZED = STATUS_CLASS_PREFIX + 'initialized',
  CLASS_ACTIVE = STATUS_CLASS_PREFIX + 'active',
  CLASS_PREV = STATUS_CLASS_PREFIX + 'prev',
  CLASS_NEXT = STATUS_CLASS_PREFIX + 'next',
  CLASS_VISIBLE = STATUS_CLASS_PREFIX + 'visible',
  CLASS_LOADING = STATUS_CLASS_PREFIX + 'loading',
  CLASS_FOCUS_IN = STATUS_CLASS_PREFIX + 'focus-in',
  CLASS_OVERFLOW = STATUS_CLASS_PREFIX + 'overflow',
  STATUS_CLASSES = [CLASS_ACTIVE, CLASS_VISIBLE, CLASS_PREV, CLASS_NEXT, CLASS_LOADING, CLASS_FOCUS_IN, CLASS_OVERFLOW],
  CLASSES = {
    slide: CLASS_SLIDE,
    clone: CLASS_CLONE,
    arrows: CLASS_ARROWS,
    arrow: CLASS_ARROW,
    prev: CLASS_ARROW_PREV,
    next: CLASS_ARROW_NEXT,
    pagination: CLASS_PAGINATION,
    page: CLASS_PAGINATION_PAGE,
    spinner: CLASS_SPINNER,
  };
function closest(t, e) {
  if (isFunction(t.closest)) return t.closest(e);
  for (var n = t; n && 1 === n.nodeType && !matches(n, e); ) n = n.parentElement;
  return n;
}
var FRICTION = 5,
  LOG_INTERVAL = 200,
  POINTER_DOWN_EVENTS = 'touchstart mousedown',
  POINTER_MOVE_EVENTS = 'touchmove mousemove',
  POINTER_UP_EVENTS = 'touchend touchcancel mouseup click';
function Elements(t, e, n) {
  var i,
    r,
    o,
    s = EventInterface(t),
    a = s.on,
    E = s.bind,
    u = t.root,
    c = n.i18n,
    l = {},
    A = [],
    S = [],
    f = [];
  function d() {
    (i = R('.' + CLASS_TRACK)),
      (r = child(i, '.' + CLASS_LIST)),
      assert(i && r, 'A track/list element is missing.'),
      push(A, children(r, '.' + CLASS_SLIDE + ':not(.' + CLASS_CLONE + ')')),
      forOwn(
        {
          arrows: CLASS_ARROWS,
          pagination: CLASS_PAGINATION,
          prev: CLASS_ARROW_PREV,
          next: CLASS_ARROW_NEXT,
          bar: CLASS_PROGRESS_BAR,
          toggle: CLASS_TOGGLE,
        },
        function (t, e) {
          l[e] = R('.' + t);
        }
      ),
      assign(l, { root: u, track: i, list: r, slides: A }),
      (function () {
        var t = u.id || uniqueId(PROJECT_CODE),
          e = n.role;
        (u.id = t),
          (i.id = i.id || t + '-track'),
          (r.id = r.id || t + '-list'),
          !getAttribute(u, ROLE) && 'SECTION' !== u.tagName && e && setAttribute(u, ROLE, e);
        setAttribute(u, ARIA_ROLEDESCRIPTION, c.carousel), setAttribute(r, ROLE, 'presentation');
      })(),
      T();
  }
  function _(t) {
    var e = ALL_ATTRIBUTES.concat('style');
    empty(A),
      removeClass(u, S),
      removeClass(i, f),
      removeAttribute([i, r], e),
      removeAttribute(u, t ? e : ['style', ARIA_ROLEDESCRIPTION]);
  }
  function T() {
    removeClass(u, S),
      removeClass(i, f),
      (S = L(CLASS_ROOT)),
      (f = L(CLASS_TRACK)),
      addClass(u, S),
      addClass(i, f),
      setAttribute(u, ARIA_LABEL, n.label),
      setAttribute(u, ARIA_LABELLEDBY, n.labelledby);
  }
  function R(t) {
    var e = query(u, t);
    return e && closest(e, '.' + CLASS_ROOT) === u ? e : void 0;
  }
  function L(t) {
    return [
      t + '--' + n.type,
      t + '--' + n.direction,
      n.drag && t + '--draggable',
      n.isNavigation && t + '--nav',
      t === CLASS_ROOT && CLASS_ACTIVE,
    ];
  }
  return assign(l, {
    setup: d,
    mount: function () {
      a(EVENT_REFRESH, _),
        a(EVENT_REFRESH, d),
        a(EVENT_UPDATED, T),
        E(
          document,
          POINTER_DOWN_EVENTS + ' keydown',
          function (t) {
            o = 'keydown' === t.type;
          },
          { capture: !0 }
        ),
        E(u, 'focusin', function () {
          toggleClass(u, CLASS_FOCUS_IN, !!o);
        });
    },
    destroy: _,
  });
}
var SLIDE = 'slide',
  LOOP = 'loop',
  FADE = 'fade';
function Slide$1(t, e, n, i) {
  var r,
    o = EventInterface(t),
    s = o.on,
    a = o.emit,
    E = o.bind,
    u = t.Components,
    c = t.root,
    l = t.options,
    A = l.isNavigation,
    S = l.updateOnMove,
    f = l.i18n,
    d = l.pagination,
    _ = l.slideFocus,
    T = u.Direction.resolve,
    R = getAttribute(i, 'style'),
    L = getAttribute(i, ARIA_LABEL),
    p = n > -1,
    I = child(i, '.' + CLASS_CONTAINER);
  function N() {
    var r = t.splides
      .map(function (t) {
        var n = t.splide.Components.Slides.getAt(e);
        return n ? n.slide.id : '';
      })
      .join(' ');
    setAttribute(i, ARIA_LABEL, format(f.slideX, (p ? n : e) + 1)),
      setAttribute(i, ARIA_CONTROLS, r),
      setAttribute(i, ROLE, _ ? 'button' : ''),
      _ && removeAttribute(i, ARIA_ROLEDESCRIPTION);
  }
  function h() {
    r || O();
  }
  function O() {
    if (!r) {
      var n = t.index;
      (o = v()) !== hasClass(i, CLASS_ACTIVE) &&
        (toggleClass(i, CLASS_ACTIVE, o),
        setAttribute(i, ARIA_CURRENT, (A && o) || ''),
        a(o ? EVENT_ACTIVE : EVENT_INACTIVE, C)),
        (function () {
          var e = (function () {
              if (t.is(FADE)) return v();
              var e = rect(u.Elements.track),
                n = rect(i),
                r = T('left', !0),
                o = T('right', !0);
              return floor(e[r]) <= ceil(n[r]) && floor(n[o]) <= ceil(e[o]);
            })(),
            n = !e && (!v() || p);
          t.state.is([MOVING, SCROLLING]) || setAttribute(i, ARIA_HIDDEN, n || '');
          setAttribute(queryAll(i, l.focusableNodes || ''), TAB_INDEX, n ? -1 : ''),
            _ && setAttribute(i, TAB_INDEX, n ? -1 : 0);
          e !== hasClass(i, CLASS_VISIBLE) &&
            (toggleClass(i, CLASS_VISIBLE, e), a(e ? EVENT_VISIBLE : EVENT_HIDDEN, C));
          if (!e && document.activeElement === i) {
            var r = u.Slides.getAt(t.index);
            r && focus(r.slide);
          }
        })(),
        toggleClass(i, CLASS_PREV, e === n - 1),
        toggleClass(i, CLASS_NEXT, e === n + 1);
    }
    var o;
  }
  function v() {
    var i = t.index;
    return i === e || (l.cloneStatus && i === n);
  }
  var C = {
    index: e,
    slideIndex: n,
    slide: i,
    container: I,
    isClone: p,
    mount: function () {
      p ||
        ((i.id = c.id + '-slide' + pad(e + 1)),
        setAttribute(i, ROLE, d ? 'tabpanel' : 'group'),
        setAttribute(i, ARIA_ROLEDESCRIPTION, f.slide),
        setAttribute(i, ARIA_LABEL, L || format(f.slideLabel, [e + 1, t.length]))),
        E(i, 'click', apply(a, EVENT_CLICK, C)),
        E(i, 'keydown', apply(a, EVENT_SLIDE_KEYDOWN, C)),
        s([EVENT_MOVED, EVENT_SHIFTED, EVENT_SCROLLED], O),
        s(EVENT_NAVIGATION_MOUNTED, N),
        S && s(EVENT_MOVE, h);
    },
    destroy: function () {
      (r = !0),
        o.destroy(),
        removeClass(i, STATUS_CLASSES),
        removeAttribute(i, ALL_ATTRIBUTES),
        setAttribute(i, 'style', R),
        setAttribute(i, ARIA_LABEL, L || '');
    },
    update: O,
    style: function (t, e, n) {
      style((n && I) || i, t, e);
    },
    isWithin: function (n, i) {
      var r = abs(n - e);
      return p || (!l.rewind && !t.is(LOOP)) || (r = min(r, t.length - r)), r <= i;
    },
  };
  return C;
}
function Slides(t, e, n) {
  var i = EventInterface(t),
    r = i.on,
    o = i.emit,
    s = i.bind,
    a = e.Elements,
    E = a.slides,
    u = a.list,
    c = [];
  function l() {
    E.forEach(function (t, e) {
      S(t, e, -1);
    });
  }
  function A() {
    d(function (t) {
      t.destroy();
    }),
      empty(c);
  }
  function S(e, n, i) {
    var r = Slide$1(t, n, i, e);
    r.mount(),
      c.push(r),
      c.sort(function (t, e) {
        return t.index - e.index;
      });
  }
  function f(t) {
    return t
      ? _(function (t) {
          return !t.isClone;
        })
      : c;
  }
  function d(t, e) {
    f(e).forEach(t);
  }
  function _(t) {
    return c.filter(
      isFunction(t)
        ? t
        : function (e) {
            return isString(t) ? matches(e.slide, t) : includes(toArray(t), e.index);
          }
    );
  }
  return {
    mount: function () {
      l(), r(EVENT_REFRESH, A), r(EVENT_REFRESH, l);
    },
    destroy: A,
    update: function () {
      d(function (t) {
        t.update();
      });
    },
    register: S,
    get: f,
    getIn: function (t) {
      var i = e.Controller,
        r = i.toIndex(t),
        o = i.hasFocus() ? 1 : n.perPage;
      return _(function (t) {
        return between(t.index, r, r + o - 1);
      });
    },
    getAt: function (t) {
      return _(t)[0];
    },
    add: function (t, e) {
      forEach(t, function (t) {
        if ((isString(t) && (t = parseHtml(t)), isHTMLElement(t))) {
          var i = E[e];
          i ? before(t, i) : append(u, t),
            addClass(t, n.classes.slide),
            (r = t),
            (a = apply(o, EVENT_RESIZE)),
            (c = queryAll(r, 'img')),
            (l = c.length)
              ? c.forEach(function (t) {
                  s(t, 'load error', function () {
                    --l || a();
                  });
                })
              : a();
        }
        var r, a, c, l;
      }),
        o(EVENT_REFRESH);
    },
    remove: function (t) {
      remove(
        _(t).map(function (t) {
          return t.slide;
        })
      ),
        o(EVENT_REFRESH);
    },
    forEach: d,
    filter: _,
    style: function (t, e, n) {
      d(function (i) {
        i.style(t, e, n);
      });
    },
    getLength: function (t) {
      return t ? E.length : c.length;
    },
    isEnough: function () {
      return c.length > n.perPage;
    },
  };
}
function Layout(t, e, n) {
  var i,
    r,
    o,
    s = EventInterface(t),
    a = s.on,
    E = s.bind,
    u = s.emit,
    c = e.Slides,
    l = e.Direction.resolve,
    A = e.Elements,
    S = A.root,
    f = A.track,
    d = A.list,
    _ = c.getAt,
    T = c.style;
  function R() {
    (i = n.direction === TTB),
      style(S, 'maxWidth', unit(n.width)),
      style(f, l('paddingLeft'), p(!1)),
      style(f, l('paddingRight'), p(!0)),
      L(!0);
  }
  function L(t) {
    var e = rect(S);
    (t || r.width !== e.width || r.height !== e.height) &&
      (style(
        f,
        'height',
        (function () {
          var t = '';
          i &&
            (assert((t = I()), 'height or heightRatio is missing.'),
            (t = 'calc(' + t + ' - ' + p(!1) + ' - ' + p(!0) + ')'));
          return t;
        })()
      ),
      T(l('marginRight'), unit(n.gap)),
      T('width', n.autoWidth ? null : unit(n.fixedWidth) || (i ? '' : N())),
      T('height', unit(n.fixedHeight) || (i ? (n.autoHeight ? null : N()) : I()), !0),
      (r = e),
      u(EVENT_RESIZED),
      o !== (o = D()) && (toggleClass(S, CLASS_OVERFLOW, o), u(EVENT_OVERFLOW, o)));
  }
  function p(t) {
    var e = n.padding,
      i = l(t ? 'right' : 'left');
    return (e && unit(e[i] || (isObject(e) ? 0 : e))) || '0px';
  }
  function I() {
    return unit(n.height || rect(d).width * n.heightRatio);
  }
  function N() {
    var t = unit(n.gap);
    return 'calc((100%' + (t && ' + ' + t) + ')/' + (n.perPage || 1) + (t && ' - ' + t) + ')';
  }
  function h() {
    return rect(d)[l('width')];
  }
  function O(t, e) {
    var n = _(t || 0);
    return n ? rect(n.slide)[l('width')] + (e ? 0 : g()) : 0;
  }
  function v(t, e) {
    var n = _(t);
    if (n) {
      var i = rect(n.slide)[l('right')],
        r = rect(d)[l('left')];
      return abs(i - r) + (e ? 0 : g());
    }
    return 0;
  }
  function C(e) {
    return v(t.length - 1) - v(0) + O(0, e);
  }
  function g() {
    var t = _(0);
    return (t && parseFloat(style(t.slide, l('marginRight')))) || 0;
  }
  function D() {
    return t.is(FADE) || C(!0) > h();
  }
  return {
    mount: function () {
      R(),
        E(window, 'resize load', Throttle(apply(u, EVENT_RESIZE))),
        a([EVENT_UPDATED, EVENT_REFRESH], R),
        a(EVENT_RESIZE, L);
    },
    resize: L,
    listSize: h,
    slideSize: O,
    sliderSize: C,
    totalSize: v,
    getPadding: function (t) {
      return parseFloat(style(f, l('padding' + (t ? 'Right' : 'Left')))) || 0;
    },
    isOverflow: D,
  };
}
var MULTIPLIER = 2;
function Clones(t, e, n) {
  var i,
    r = EventInterface(t),
    o = r.on,
    s = e.Elements,
    a = e.Slides,
    E = e.Direction.resolve,
    u = [];
  function c() {
    o(EVENT_REFRESH, l),
      o([EVENT_UPDATED, EVENT_RESIZE], S),
      (i = f()) &&
        (!(function (e) {
          var i = a.get().slice(),
            r = i.length;
          if (r) {
            for (; i.length < e; ) push(i, i);
            push(i.slice(-e), i.slice(0, e)).forEach(function (o, E) {
              var c = E < e,
                l = (function (e, i) {
                  var r = e.cloneNode(!0);
                  return addClass(r, n.classes.clone), (r.id = t.root.id + '-clone' + pad(i + 1)), r;
                })(o.slide, E);
              c ? before(l, i[0].slide) : append(s.list, l), push(u, l), a.register(l, E - e + (c ? 0 : r), o.index);
            });
          }
        })(i),
        e.Layout.resize(!0));
  }
  function l() {
    A(), c();
  }
  function A() {
    remove(u), empty(u), r.destroy();
  }
  function S() {
    var t = f();
    i !== t && (i < t || !t) && r.emit(EVENT_REFRESH);
  }
  function f() {
    var i = n.clones;
    if (t.is(LOOP)) {
      if (isUndefined(i)) {
        var r = n[E('fixedWidth')] && e.Layout.slideSize(0);
        i = (r && ceil(rect(s.track)[E('width')] / r)) || (n[E('autoWidth')] && t.length) || n.perPage * MULTIPLIER;
      }
    } else i = 0;
    return i;
  }
  return { mount: c, destroy: A };
}
function Move(t, e, n) {
  var i,
    r = EventInterface(t),
    o = r.on,
    s = r.emit,
    a = t.state.set,
    E = e.Layout,
    u = E.slideSize,
    c = E.getPadding,
    l = E.totalSize,
    A = E.listSize,
    S = E.sliderSize,
    f = e.Direction,
    d = f.resolve,
    _ = f.orient,
    T = e.Elements,
    R = T.list,
    L = T.track;
  function p() {
    e.Controller.isBusy() || (e.Scroll.cancel(), I(t.index), e.Slides.update());
  }
  function I(t) {
    N(C(t, !0));
  }
  function N(n, i) {
    if (!t.is(FADE)) {
      var r = i
        ? n
        : (function (n) {
            if (t.is(LOOP)) {
              var i = v(n),
                r = i > e.Controller.getEnd();
              (i < 0 || r) && (n = h(n, r));
            }
            return n;
          })(n);
      style(R, 'transform', 'translate' + d('X') + '(' + r + 'px)'), n !== r && s(EVENT_SHIFTED);
    }
  }
  function h(t, e) {
    var n = t - D(e),
      i = S();
    return (t -= _(i * (ceil(abs(n) / i) || 1)) * (e ? 1 : -1));
  }
  function O() {
    N(g(), !0), i.cancel();
  }
  function v(t) {
    for (var n = e.Slides.get(), i = 0, r = 1 / 0, o = 0; o < n.length; o++) {
      var s = n[o].index,
        a = abs(C(s, !0) - t);
      if (!(a <= r)) break;
      (r = a), (i = s);
    }
    return i;
  }
  function C(e, i) {
    var r = _(
      l(e - 1) -
        (function (t) {
          var e = n.focus;
          return 'center' === e ? (A() - u(t, !0)) / 2 : +e * u(t) || 0;
        })(e)
    );
    return i
      ? (function (e) {
          n.trimSpace && t.is(SLIDE) && (e = clamp(e, 0, _(S(!0) - A())));
          return e;
        })(r)
      : r;
  }
  function g() {
    var t = d('left');
    return rect(R)[t] - rect(L)[t] + _(c(!1));
  }
  function D(t) {
    return C(t ? e.Controller.getEnd() : 0, !!n.trimSpace);
  }
  return {
    mount: function () {
      (i = e.Transition), o([EVENT_MOUNTED, EVENT_RESIZED, EVENT_UPDATED, EVENT_REFRESH], p);
    },
    move: function (t, e, n, r) {
      var o, E;
      t !== e &&
        ((o = t > n), (E = _(h(g(), o))), o ? E >= 0 : E <= R[d('scrollWidth')] - rect(L)[d('width')]) &&
        (O(), N(h(g(), t > n), !0)),
        a(MOVING),
        s(EVENT_MOVE, e, n, t),
        i.start(e, function () {
          a(IDLE), s(EVENT_MOVED, e, n, t), r && r();
        });
    },
    jump: I,
    translate: N,
    shift: h,
    cancel: O,
    toIndex: v,
    toPosition: C,
    getPosition: g,
    getLimit: D,
    exceededLimit: function (t, e) {
      e = isUndefined(e) ? g() : e;
      var n = !0 !== t && _(e) < _(D(!1)),
        i = !1 !== t && _(e) > _(D(!0));
      return n || i;
    },
    reposition: p,
  };
}
function Controller(t, e, n) {
  var i,
    r,
    o,
    s,
    a = EventInterface(t),
    E = a.on,
    u = a.emit,
    c = e.Move,
    l = c.getPosition,
    A = c.getLimit,
    S = c.toPosition,
    f = e.Slides,
    d = f.isEnough,
    _ = f.getLength,
    T = n.omitEnd,
    R = t.is(LOOP),
    L = t.is(SLIDE),
    p = apply(C, !1),
    I = apply(C, !0),
    N = n.start || 0,
    h = N;
  function O() {
    (r = _(!0)), (o = n.perMove), (s = n.perPage), (i = m());
    var t = clamp(N, 0, T ? i : r - 1);
    t !== N && ((N = t), c.reposition());
  }
  function v() {
    i !== m() && u(EVENT_END_INDEX_CHANGED);
  }
  function C(t, e) {
    var n = o || (P() ? 1 : s),
      r = g(N + n * (t ? -1 : 1), N, !(o || P()));
    return -1 === r && L && !approximatelyEqual(l(), A(!t), 1) ? (t ? 0 : i) : e ? r : D(r);
  }
  function g(e, a, E) {
    if (d() || P()) {
      var u = (function (e) {
        if (L && 'move' === n.trimSpace && e !== N)
          for (var i = l(); i === S(e, !0) && between(e, 0, t.length - 1, !n.rewind); ) e < N ? --e : ++e;
        return e;
      })(e);
      u !== e && ((a = e), (e = u), (E = !1)),
        e < 0 || e > i
          ? (e =
              o || (!between(0, e, a, !0) && !between(i, a, e, !0))
                ? R
                  ? E
                    ? e < 0
                      ? -(r % s || s)
                      : r
                    : e
                  : n.rewind
                  ? e < 0
                    ? i
                    : 0
                  : -1
                : V(y(e)))
          : E && e !== a && (e = V(y(a) + (e < a ? -1 : 1)));
    } else e = -1;
    return e;
  }
  function D(t) {
    return R ? (t + r) % r || 0 : t;
  }
  function m() {
    for (var t = r - (P() || (R && o) ? 1 : s); T && t-- > 0; )
      if (S(r - 1, !0) !== S(t, !0)) {
        t++;
        break;
      }
    return clamp(t, 0, r - 1);
  }
  function V(t) {
    return clamp(P() ? t : s * t, 0, i);
  }
  function y(t) {
    return P() ? min(t, i) : floor((t >= i ? r - 1 : t) / s);
  }
  function b(t) {
    t !== N && ((h = N), (N = t));
  }
  function P() {
    return !isUndefined(n.focus) || n.isNavigation;
  }
  function U() {
    return t.state.is([MOVING, SCROLLING]) && !!n.waitForTransition;
  }
  return {
    mount: function () {
      O(), E([EVENT_UPDATED, EVENT_REFRESH, EVENT_END_INDEX_CHANGED], O), E(EVENT_RESIZED, v);
    },
    go: function (t, e, n) {
      if (!U()) {
        var r = (function (t) {
            var e = N;
            if (isString(t)) {
              var n = t.match(/([+\-<>])(\d+)?/) || [],
                r = n[1],
                o = n[2];
              '+' === r || '-' === r
                ? (e = g(N + +('' + r + (+o || 1)), N))
                : '>' === r
                ? (e = o ? V(+o) : p(!0))
                : '<' === r && (e = I(!0));
            } else e = R ? t : clamp(t, 0, i);
            return e;
          })(t),
          o = D(r);
        o > -1 && (e || o !== N) && (b(o), c.move(r, o, h, n));
      }
    },
    scroll: function (t, n, r, o) {
      e.Scroll.scroll(t, n, r, function () {
        var t = D(c.toIndex(l()));
        b(T ? min(t, i) : t), o && o();
      });
    },
    getNext: p,
    getPrev: I,
    getAdjacent: C,
    getEnd: m,
    setIndex: b,
    getIndex: function (t) {
      return t ? h : N;
    },
    toIndex: V,
    toPage: y,
    toDest: function (t) {
      var e = c.toIndex(t);
      return L ? clamp(e, 0, i) : e;
    },
    hasFocus: P,
    isBusy: U,
  };
}
var XML_NAME_SPACE = 'http://www.w3.org/2000/svg',
  PATH = 'm15.5 0.932-4.3 4.38 14.5 14.6-14.5 14.5 4.3 4.4 14.6-14.6 4.4-4.3-4.4-4.4-14.6-14.6z',
  SIZE = 40;
function Arrows(t, e, n) {
  var i,
    r,
    o = EventInterface(t),
    s = o.on,
    a = o.bind,
    E = o.emit,
    u = n.classes,
    c = n.i18n,
    l = e.Elements,
    A = e.Controller,
    S = l.arrows,
    f = l.track,
    d = S,
    _ = l.prev,
    T = l.next,
    R = {};
  function L() {
    !(function () {
      var t = n.arrows;
      !t ||
        (_ && T) ||
        ((d = S || create('div', u.arrows)), (_ = h(!0)), (T = h(!1)), (i = !0), append(d, [_, T]), !S && before(d, f));
      _ &&
        T &&
        (assign(R, { prev: _, next: T }),
        display(d, t ? '' : 'none'),
        addClass(d, (r = CLASS_ARROWS + '--' + n.direction)),
        t &&
          (s([EVENT_MOUNTED, EVENT_MOVED, EVENT_REFRESH, EVENT_SCROLLED, EVENT_END_INDEX_CHANGED], O),
          a(T, 'click', apply(N, '>')),
          a(_, 'click', apply(N, '<')),
          O(),
          setAttribute([_, T], ARIA_CONTROLS, f.id),
          E(EVENT_ARROWS_MOUNTED, _, T)));
    })(),
      s(EVENT_UPDATED, p);
  }
  function p() {
    I(), L();
  }
  function I() {
    o.destroy(),
      removeClass(d, r),
      i ? (remove(S ? [_, T] : d), (_ = T = null)) : removeAttribute([_, T], ALL_ATTRIBUTES);
  }
  function N(t) {
    A.go(t, !0);
  }
  function h(t) {
    return parseHtml(
      '<button class="' +
        u.arrow +
        ' ' +
        (t ? u.prev : u.next) +
        '" type="button"><svg xmlns="' +
        XML_NAME_SPACE +
        '" viewBox="0 0 ' +
        SIZE +
        ' ' +
        SIZE +
        '" width="' +
        SIZE +
        '" height="' +
        SIZE +
        '" focusable="false"><path d="' +
        (n.arrowPath || PATH) +
        '" />'
    );
  }
  function O() {
    if (_ && T) {
      var e = t.index,
        n = A.getPrev(),
        i = A.getNext(),
        r = n > -1 && e < n ? c.last : c.prev,
        o = i > -1 && e > i ? c.first : c.next;
      (_.disabled = n < 0),
        (T.disabled = i < 0),
        setAttribute(_, ARIA_LABEL, r),
        setAttribute(T, ARIA_LABEL, o),
        E(EVENT_ARROWS_UPDATED, _, T, n, i);
    }
  }
  return { arrows: R, mount: L, destroy: I, update: O };
}
var INTERVAL_DATA_ATTRIBUTE = DATA_ATTRIBUTE + '-interval';
function Autoplay(t, e, n) {
  var i,
    r,
    o = EventInterface(t),
    s = o.on,
    a = o.bind,
    E = o.emit,
    u = RequestInterval(n.interval, t.go.bind(t, '>'), function (t) {
      var e = l.bar;
      e && style(e, 'width', 100 * t + '%'), E(EVENT_AUTOPLAY_PLAYING, t);
    }),
    c = u.isPaused,
    l = e.Elements,
    A = e.Elements,
    S = A.root,
    f = A.toggle,
    d = n.autoplay,
    _ = 'pause' === d;
  function T() {
    c() && e.Slides.isEnough() && (u.start(!n.resetProgress), (r = i = _ = !1), p(), E(EVENT_AUTOPLAY_PLAY));
  }
  function R(t) {
    void 0 === t && (t = !0), (_ = !!t), p(), c() || (u.pause(), E(EVENT_AUTOPLAY_PAUSE));
  }
  function L() {
    _ || (i || r ? R(!1) : T());
  }
  function p() {
    f && (toggleClass(f, CLASS_ACTIVE, !_), setAttribute(f, ARIA_LABEL, n.i18n[_ ? 'play' : 'pause']));
  }
  function I(t) {
    var i = e.Slides.getAt(t);
    u.set((i && +getAttribute(i.slide, INTERVAL_DATA_ATTRIBUTE)) || n.interval);
  }
  return {
    mount: function () {
      d &&
        (!(function () {
          n.pauseOnHover &&
            a(S, 'mouseenter mouseleave', function (t) {
              (i = 'mouseenter' === t.type), L();
            });
          n.pauseOnFocus &&
            a(S, 'focusin focusout', function (t) {
              (r = 'focusin' === t.type), L();
            });
          f &&
            a(f, 'click', function () {
              _ ? T() : R(!0);
            });
          s([EVENT_MOVE, EVENT_SCROLL, EVENT_REFRESH], u.rewind), s(EVENT_MOVE, I);
        })(),
        f && setAttribute(f, ARIA_CONTROLS, l.track.id),
        _ || T(),
        p());
    },
    destroy: u.cancel,
    play: T,
    pause: R,
    isPaused: c,
  };
}
function Cover(t, e, n) {
  var i = EventInterface(t).on;
  function r(t) {
    e.Slides.forEach(function (e) {
      var n = child(e.container || e.slide, 'img');
      n && n.src && o(t, n, e);
    });
  }
  function o(t, e, n) {
    n.style('background', t ? 'center/cover no-repeat url("' + e.src + '")' : '', !0), display(e, t ? 'none' : '');
  }
  return {
    mount: function () {
      n.cover &&
        (i(EVENT_LAZYLOAD_LOADED, apply(o, !0)), i([EVENT_MOUNTED, EVENT_UPDATED, EVENT_REFRESH], apply(r, !0)));
    },
    destroy: apply(r, !1),
  };
}
var BOUNCE_DIFF_THRESHOLD = 10,
  BOUNCE_DURATION = 600,
  FRICTION_FACTOR = 0.6,
  BASE_VELOCITY = 1.5,
  MIN_DURATION = 800;
function Scroll(t, e, n) {
  var i,
    r,
    o = EventInterface(t),
    s = o.on,
    a = o.emit,
    E = t.state.set,
    u = e.Move,
    c = u.getPosition,
    l = u.getLimit,
    A = u.exceededLimit,
    S = u.translate,
    f = t.is(SLIDE),
    d = 1;
  function _(t, n, o, s, l) {
    var S = c();
    if ((L(), o && (!f || !A()))) {
      var _ = e.Layout.sliderSize(),
        p = sign(t) * _ * floor(abs(t) / _) || 0;
      t = u.toPosition(e.Controller.toDest(t % _)) + p;
    }
    var I = approximatelyEqual(S, t, 1);
    (d = 1),
      (n = I ? 0 : n || max(abs(t - S) / BASE_VELOCITY, MIN_DURATION)),
      (r = s),
      (i = RequestInterval(n, T, apply(R, S, t, l), 1)),
      E(SCROLLING),
      a(EVENT_SCROLL),
      i.start();
  }
  function T() {
    E(IDLE), r && r(), a(EVENT_SCROLLED);
  }
  function R(t, e, i, o) {
    var s,
      a,
      E = c(),
      u = (t + (e - t) * ((s = o), (a = n.easingFunc) ? a(s) : 1 - Math.pow(1 - s, 4)) - E) * d;
    S(E + u),
      f &&
        !i &&
        A() &&
        ((d *= FRICTION_FACTOR), abs(u) < BOUNCE_DIFF_THRESHOLD && _(l(A(!0)), BOUNCE_DURATION, !1, r, !0));
  }
  function L() {
    i && i.cancel();
  }
  function p() {
    i && !i.isPaused() && (L(), T());
  }
  return {
    mount: function () {
      s(EVENT_MOVE, L), s([EVENT_UPDATED, EVENT_REFRESH], p);
    },
    destroy: L,
    scroll: _,
    cancel: p,
  };
}
var SCROLL_LISTENER_OPTIONS = { passive: !1, capture: !0 };
function Drag(t, e, n) {
  var i,
    r,
    o,
    s,
    a,
    E,
    u,
    c,
    l = EventInterface(t),
    A = l.on,
    S = l.emit,
    f = l.bind,
    d = l.unbind,
    _ = t.state,
    T = e.Move,
    R = e.Scroll,
    L = e.Controller,
    p = e.Elements.track,
    I = e.Media.reduce,
    N = e.Direction,
    h = N.resolve,
    O = N.orient,
    v = T.getPosition,
    C = T.exceededLimit,
    g = !1;
  function D() {
    var t = n.drag;
    B(!t), (s = 'free' === t);
  }
  function m(t) {
    if (((E = !1), !u)) {
      var e = M(t);
      (i = t.target),
        (r = n.noDrag),
        matches(i, '.' + CLASS_PAGINATION_PAGE + ', .' + CLASS_ARROW) ||
          (r && matches(i, r)) ||
          (!e && t.button) ||
          (L.isBusy()
            ? prevent(t, !0)
            : ((c = e ? p : window),
              (a = _.is([MOVING, SCROLLING])),
              (o = null),
              f(c, POINTER_MOVE_EVENTS, V, SCROLL_LISTENER_OPTIONS),
              f(c, POINTER_UP_EVENTS, y, SCROLL_LISTENER_OPTIONS),
              T.cancel(),
              R.cancel(),
              P(t)));
    }
    var i, r;
  }
  function V(e) {
    if ((_.is(DRAGGING) || (_.set(DRAGGING), S(EVENT_DRAG)), e.cancelable))
      if (a) {
        T.translate(i + U(e) / (g && t.is(SLIDE) ? FRICTION : 1));
        var r = G(e) > LOG_INTERVAL,
          o = g !== (g = C());
        (r || o) && P(e), (E = !0), S(EVENT_DRAGGING), prevent(e);
      } else
        (function (t) {
          return abs(U(t)) > abs(U(t, !0));
        })(e) &&
          ((a = (function (t) {
            var e = n.dragMinThreshold,
              i = isObject(e),
              r = (i && e.mouse) || 0,
              o = (i ? e.touch : +e) || 10;
            return abs(U(t)) > (M(t) ? o : r);
          })(e)),
          prevent(e));
  }
  function y(i) {
    _.is(DRAGGING) && (_.set(IDLE), S(EVENT_DRAGGED)),
      a &&
        (!(function (i) {
          var r = (function (e) {
              if (t.is(LOOP) || !g) {
                var n = G(e);
                if (n && n < LOG_INTERVAL) return U(e) / n;
              }
              return 0;
            })(i),
            o = (function (t) {
              return (
                v() +
                sign(t) * min(abs(t) * (n.flickPower || 600), s ? 1 / 0 : e.Layout.listSize() * (n.flickMaxPages || 1))
              );
            })(r),
            a = n.rewind && n.rewindByDrag;
          I(!1),
            s
              ? L.scroll(o, 0, n.snap)
              : t.is(FADE)
              ? L.go(O(sign(r)) < 0 ? (a ? '<' : '-') : a ? '>' : '+')
              : t.is(SLIDE) && g && a
              ? L.go(C(!0) ? '>' : '<')
              : L.go(L.toDest(o), !0);
          I(!0);
        })(i),
        prevent(i)),
      d(c, POINTER_MOVE_EVENTS, V),
      d(c, POINTER_UP_EVENTS, y),
      (a = !1);
  }
  function b(t) {
    !u && E && prevent(t, !0);
  }
  function P(t) {
    (o = r), (r = t), (i = v());
  }
  function U(t, e) {
    return w(t, e) - w(F(t), e);
  }
  function G(t) {
    return timeOf(t) - timeOf(F(t));
  }
  function F(t) {
    return (r === t && o) || r;
  }
  function w(t, e) {
    return (M(t) ? t.changedTouches[0] : t)['page' + h(e ? 'Y' : 'X')];
  }
  function M(t) {
    return 'undefined' != typeof TouchEvent && t instanceof TouchEvent;
  }
  function B(t) {
    u = t;
  }
  return {
    mount: function () {
      f(p, POINTER_MOVE_EVENTS, noop, SCROLL_LISTENER_OPTIONS),
        f(p, POINTER_UP_EVENTS, noop, SCROLL_LISTENER_OPTIONS),
        f(p, POINTER_DOWN_EVENTS, m, SCROLL_LISTENER_OPTIONS),
        f(p, 'click', b, { capture: !0 }),
        f(p, 'dragstart', prevent),
        A([EVENT_MOUNTED, EVENT_UPDATED], D);
    },
    disable: B,
    isDragging: function () {
      return a;
    },
  };
}
var NORMALIZATION_MAP = { Spacebar: ' ', Right: ARROW_RIGHT, Left: ARROW_LEFT, Up: ARROW_UP, Down: ARROW_DOWN };
function normalizeKey(t) {
  return (t = isString(t) ? t : t.key), NORMALIZATION_MAP[t] || t;
}
var KEYBOARD_EVENT = 'keydown';
function Keyboard(t, e, n) {
  var i,
    r,
    o = EventInterface(t),
    s = o.on,
    a = o.bind,
    E = o.unbind,
    u = t.root,
    c = e.Direction.resolve;
  function l() {
    var t = n.keyboard;
    t && ((i = 'global' === t ? window : u), a(i, KEYBOARD_EVENT, f));
  }
  function A() {
    E(i, KEYBOARD_EVENT);
  }
  function S() {
    var t = r;
    (r = !0),
      nextTick(function () {
        r = t;
      });
  }
  function f(e) {
    if (!r) {
      var n = normalizeKey(e);
      n === c(ARROW_LEFT) ? t.go('<') : n === c(ARROW_RIGHT) && t.go('>');
    }
  }
  return {
    mount: function () {
      l(), s(EVENT_UPDATED, A), s(EVENT_UPDATED, l), s(EVENT_MOVE, S);
    },
    destroy: A,
    disable: function (t) {
      r = t;
    },
  };
}
var SRC_DATA_ATTRIBUTE = DATA_ATTRIBUTE + '-lazy',
  SRCSET_DATA_ATTRIBUTE = SRC_DATA_ATTRIBUTE + '-srcset',
  IMAGE_SELECTOR = '[' + SRC_DATA_ATTRIBUTE + '], [' + SRCSET_DATA_ATTRIBUTE + ']';
function LazyLoad(t, e, n) {
  var i = EventInterface(t),
    r = i.on,
    o = i.off,
    s = i.bind,
    a = i.emit,
    E = 'sequential' === n.lazyLoad,
    u = [EVENT_MOVED, EVENT_SCROLLED],
    c = [];
  function l() {
    empty(c),
      e.Slides.forEach(function (t) {
        queryAll(t.slide, IMAGE_SELECTOR).forEach(function (e) {
          var i = getAttribute(e, SRC_DATA_ATTRIBUTE),
            r = getAttribute(e, SRCSET_DATA_ATTRIBUTE);
          if (i !== e.src || r !== e.srcset) {
            var o = n.classes.spinner,
              s = e.parentElement,
              a = child(s, '.' + o) || create('span', o, s);
            c.push([e, t, a]), e.src || display(e, 'none');
          }
        });
      }),
      E ? d() : (o(u), r(u, A), A());
  }
  function A() {
    (c = c.filter(function (e) {
      var i = n.perPage * ((n.preloadPages || 1) + 1) - 1;
      return !e[1].isWithin(t.index, i) || S(e);
    })).length || o(u);
  }
  function S(t) {
    var e = t[0];
    addClass(t[1].slide, CLASS_LOADING),
      s(e, 'load error', apply(f, t)),
      setAttribute(e, 'src', getAttribute(e, SRC_DATA_ATTRIBUTE)),
      setAttribute(e, 'srcset', getAttribute(e, SRCSET_DATA_ATTRIBUTE)),
      removeAttribute(e, SRC_DATA_ATTRIBUTE),
      removeAttribute(e, SRCSET_DATA_ATTRIBUTE);
  }
  function f(t, e) {
    var n = t[0],
      i = t[1];
    removeClass(i.slide, CLASS_LOADING),
      'error' !== e.type && (remove(t[2]), display(n, ''), a(EVENT_LAZYLOAD_LOADED, n, i), a(EVENT_RESIZE)),
      E && d();
  }
  function d() {
    c.length && S(c.shift());
  }
  return {
    mount: function () {
      n.lazyLoad && (l(), r(EVENT_REFRESH, l));
    },
    destroy: apply(empty, c),
    check: A,
  };
}
function Pagination(t, e, n) {
  var i,
    r,
    o = EventInterface(t),
    s = o.on,
    a = o.emit,
    E = o.bind,
    u = e.Slides,
    c = e.Elements,
    l = e.Controller,
    A = l.hasFocus,
    S = l.getIndex,
    f = l.go,
    d = e.Direction.resolve,
    _ = c.pagination,
    T = [];
  function R() {
    i && (remove(_ ? slice(i.children) : i), removeClass(i, r), empty(T), (i = null)), o.destroy();
  }
  function L(t) {
    f('>' + t, !0);
  }
  function p(t, e) {
    var n = T.length,
      i = normalizeKey(e),
      r = I(),
      o = -1;
    i === d(ARROW_RIGHT, !1, r)
      ? (o = ++t % n)
      : i === d(ARROW_LEFT, !1, r)
      ? (o = (--t + n) % n)
      : 'Home' === i
      ? (o = 0)
      : 'End' === i && (o = n - 1);
    var s = T[o];
    s && (focus(s.button), f('>' + o), prevent(e, !0));
  }
  function I() {
    return n.paginationDirection || n.direction;
  }
  function N(t) {
    return T[l.toPage(t)];
  }
  function h() {
    var t = N(S(!0)),
      e = N(S());
    if (t) {
      var n = t.button;
      removeClass(n, CLASS_ACTIVE), removeAttribute(n, ARIA_SELECTED), setAttribute(n, TAB_INDEX, -1);
    }
    if (e) {
      var r = e.button;
      addClass(r, CLASS_ACTIVE), setAttribute(r, ARIA_SELECTED, !0), setAttribute(r, TAB_INDEX, '');
    }
    a(EVENT_PAGINATION_UPDATED, { list: i, items: T }, t, e);
  }
  return {
    items: T,
    mount: function e() {
      R(), s([EVENT_UPDATED, EVENT_REFRESH, EVENT_END_INDEX_CHANGED], e);
      var o = n.pagination;
      _ && display(_, o ? '' : 'none'),
        o &&
          (s([EVENT_MOVE, EVENT_SCROLL, EVENT_SCROLLED], h),
          (function () {
            var e = t.length,
              o = n.classes,
              s = n.i18n,
              a = n.perPage,
              S = A() ? l.getEnd() + 1 : ceil(e / a);
            addClass((i = _ || create('ul', o.pagination, c.track.parentElement)), (r = CLASS_PAGINATION + '--' + I())),
              setAttribute(i, ROLE, 'tablist'),
              setAttribute(i, ARIA_LABEL, s.select),
              setAttribute(i, ARIA_ORIENTATION, I() === TTB ? 'vertical' : '');
            for (var f = 0; f < S; f++) {
              var d = create('li', null, i),
                R = create('button', { class: o.page, type: 'button' }, d),
                N = u.getIn(f).map(function (t) {
                  return t.slide.id;
                }),
                h = !A() && a > 1 ? s.pageX : s.slideX;
              E(R, 'click', apply(L, f)),
                n.paginationKeyboard && E(R, 'keydown', apply(p, f)),
                setAttribute(d, ROLE, 'presentation'),
                setAttribute(R, ROLE, 'tab'),
                setAttribute(R, ARIA_CONTROLS, N.join(' ')),
                setAttribute(R, ARIA_LABEL, format(h, f + 1)),
                setAttribute(R, TAB_INDEX, -1),
                T.push({ li: d, button: R, page: f });
            }
          })(),
          h(),
          a(EVENT_PAGINATION_MOUNTED, { list: i, items: T }, N(t.index)));
    },
    destroy: R,
    getAt: N,
    update: h,
  };
}
var TRIGGER_KEYS = [' ', 'Enter'];
function Sync(t, e, n) {
  var i = n.isNavigation,
    r = n.slideFocus,
    o = [];
  function s() {
    var e, n;
    t.splides.forEach(function (e) {
      e.isParent || (E(t, e.splide), E(e.splide, t));
    }),
      i &&
        ((e = EventInterface(t)),
        (n = e.on)(EVENT_CLICK, c),
        n(EVENT_SLIDE_KEYDOWN, l),
        n([EVENT_MOUNTED, EVENT_UPDATED], u),
        o.push(e),
        e.emit(EVENT_NAVIGATION_MOUNTED, t.splides));
  }
  function a() {
    o.forEach(function (t) {
      t.destroy();
    }),
      empty(o);
  }
  function E(t, e) {
    var n = EventInterface(t);
    n.on(EVENT_MOVE, function (t, n, i) {
      e.go(e.is(LOOP) ? i : t);
    }),
      o.push(n);
  }
  function u() {
    setAttribute(e.Elements.list, ARIA_ORIENTATION, n.direction === TTB ? 'vertical' : '');
  }
  function c(e) {
    t.go(e.index);
  }
  function l(t, e) {
    includes(TRIGGER_KEYS, normalizeKey(e)) && (c(t), prevent(e));
  }
  return {
    setup: apply(e.Media.set, { slideFocus: isUndefined(r) ? i : r }, !0),
    mount: s,
    destroy: a,
    remount: function () {
      a(), s();
    },
  };
}
function Wheel(t, e, n) {
  var i = EventInterface(t).bind,
    r = 0;
  function o(i) {
    if (i.cancelable) {
      var o = i.deltaY,
        s = o < 0,
        a = timeOf(i),
        E = n.wheelMinThreshold || 0,
        u = n.wheelSleep || 0;
      abs(o) > E && a - r > u && (t.go(s ? '<' : '>'), (r = a)),
        (function (i) {
          return !n.releaseWheel || t.state.is(MOVING) || -1 !== e.Controller.getAdjacent(i);
        })(s) && prevent(i);
    }
  }
  return {
    mount: function () {
      n.wheel && i(e.Elements.track, 'wheel', o, SCROLL_LISTENER_OPTIONS);
    },
  };
}
var SR_REMOVAL_DELAY = 90;
function Live(t, e, n) {
  var i = EventInterface(t).on,
    r = e.Elements.track,
    o = n.live && !n.isNavigation,
    s = create('span', CLASS_SR),
    a = RequestInterval(SR_REMOVAL_DELAY, apply(E, !1));
  function E(t) {
    setAttribute(r, ARIA_BUSY, t), t ? (append(r, s), a.start()) : (remove(s), a.cancel());
  }
  function u(t) {
    o && setAttribute(r, ARIA_LIVE, t ? 'off' : 'polite');
  }
  return {
    mount: function () {
      o &&
        (u(!e.Autoplay.isPaused()),
        setAttribute(r, ARIA_ATOMIC, !0),
        (s.textContent = '…'),
        i(EVENT_AUTOPLAY_PLAY, apply(u, !0)),
        i(EVENT_AUTOPLAY_PAUSE, apply(u, !1)),
        i([EVENT_MOVED, EVENT_SCROLLED], apply(E, !0)));
    },
    disable: u,
    destroy: function () {
      removeAttribute(r, [ARIA_LIVE, ARIA_ATOMIC, ARIA_BUSY]), remove(s);
    },
  };
}
var ComponentConstructors = Object.freeze({
    __proto__: null,
    Media: Media,
    Direction: Direction,
    Elements: Elements,
    Slides: Slides,
    Layout: Layout,
    Clones: Clones,
    Move: Move,
    Controller: Controller,
    Arrows: Arrows,
    Autoplay: Autoplay,
    Cover: Cover,
    Scroll: Scroll,
    Drag: Drag,
    Keyboard: Keyboard,
    LazyLoad: LazyLoad,
    Pagination: Pagination,
    Sync: Sync,
    Wheel: Wheel,
    Live: Live,
  }),
  I18N = {
    prev: 'Previous slide',
    next: 'Next slide',
    first: 'Go to first slide',
    last: 'Go to last slide',
    slideX: 'Go to slide %s',
    pageX: 'Go to page %s',
    play: 'Start autoplay',
    pause: 'Pause autoplay',
    carousel: 'carousel',
    slide: 'slide',
    select: 'Select a slide to show',
    slideLabel: '%s of %s',
  },
  DEFAULTS = {
    type: 'slide',
    role: 'region',
    speed: 400,
    perPage: 1,
    cloneStatus: !0,
    arrows: !0,
    pagination: !0,
    paginationKeyboard: !0,
    interval: 5e3,
    pauseOnHover: !0,
    pauseOnFocus: !0,
    resetProgress: !0,
    easing: 'cubic-bezier(0.25, 1, 0.5, 1)',
    drag: !0,
    direction: 'ltr',
    trimSpace: !0,
    focusableNodes: 'a, button, textarea, input, select, iframe',
    live: !0,
    classes: CLASSES,
    i18n: I18N,
    reducedMotion: { speed: 0, rewindSpeed: 0, autoplay: 'pause' },
  };
function Fade(t, e, n) {
  var i = e.Slides;
  function r() {
    i.forEach(function (t) {
      t.style('transform', 'translateX(-' + 100 * t.index + '%)');
    });
  }
  return {
    mount: function () {
      EventInterface(t).on([EVENT_MOUNTED, EVENT_REFRESH], r);
    },
    start: function (t, e) {
      i.style('transition', 'opacity ' + n.speed + 'ms ' + n.easing), nextTick(e);
    },
    cancel: noop,
  };
}
function Slide(t, e, n) {
  var i,
    r = e.Move,
    o = e.Controller,
    s = e.Scroll,
    a = e.Elements.list,
    E = apply(style, a, 'transition');
  function u() {
    E(''), s.cancel();
  }
  return {
    mount: function () {
      EventInterface(t).bind(a, 'transitionend', function (t) {
        t.target === a && i && (u(), i());
      });
    },
    start: function (e, a) {
      var u = r.toPosition(e, !0),
        c = r.getPosition(),
        l = (function (e) {
          var i = n.rewindSpeed;
          if (t.is(SLIDE) && i) {
            var r = o.getIndex(!0),
              s = o.getEnd();
            if ((0 === r && e >= s) || (r >= s && 0 === e)) return i;
          }
          return n.speed;
        })(e);
      abs(u - c) >= 1 && l >= 1
        ? n.useScroll
          ? s.scroll(u, l, !1, a)
          : (E('transform ' + l + 'ms ' + n.easing), r.translate(u, !0), (i = a))
        : (r.jump(e), a());
    },
    cancel: u,
  };
}
var _Splide = (function () {
    function t(e, n) {
      (this.event = EventInterface()),
        (this.Components = {}),
        (this.state = State(CREATED)),
        (this.splides = []),
        (this._o = {}),
        (this._E = {});
      var i = isString(e) ? query(document, e) : e;
      assert(i, i + ' is invalid.'),
        (this.root = i),
        (n = merge(
          { label: getAttribute(i, ARIA_LABEL) || '', labelledby: getAttribute(i, ARIA_LABELLEDBY) || '' },
          DEFAULTS,
          t.defaults,
          n || {}
        ));
      try {
        merge(n, JSON.parse(getAttribute(i, DATA_ATTRIBUTE)));
      } catch (t) {
        assert(!1, 'Invalid JSON');
      }
      this._o = Object.create(merge({}, n));
    }
    var e = t.prototype;
    return (
      (e.mount = function (t, e) {
        var n = this,
          i = this.state,
          r = this.Components;
        return (
          assert(i.is([CREATED, DESTROYED]), 'Already mounted!'),
          i.set(CREATED),
          (this._C = r),
          (this._T = e || this._T || (this.is(FADE) ? Fade : Slide)),
          (this._E = t || this._E),
          forOwn(assign({}, ComponentConstructors, this._E, { Transition: this._T }), function (t, e) {
            var i = t(n, r, n._o);
            (r[e] = i), i.setup && i.setup();
          }),
          forOwn(r, function (t) {
            t.mount && t.mount();
          }),
          this.emit(EVENT_MOUNTED),
          addClass(this.root, CLASS_INITIALIZED),
          i.set(IDLE),
          this.emit(EVENT_READY),
          this
        );
      }),
      (e.sync = function (t) {
        return (
          this.splides.push({ splide: t }),
          t.splides.push({ splide: this, isParent: !0 }),
          this.state.is(IDLE) && (this._C.Sync.remount(), t.Components.Sync.remount()),
          this
        );
      }),
      (e.go = function (t) {
        return this._C.Controller.go(t), this;
      }),
      (e.on = function (t, e) {
        return this.event.on(t, e), this;
      }),
      (e.off = function (t) {
        return this.event.off(t), this;
      }),
      (e.emit = function (t) {
        var e;
        return (e = this.event).emit.apply(e, [t].concat(slice(arguments, 1))), this;
      }),
      (e.add = function (t, e) {
        return this._C.Slides.add(t, e), this;
      }),
      (e.remove = function (t) {
        return this._C.Slides.remove(t), this;
      }),
      (e.is = function (t) {
        return this._o.type === t;
      }),
      (e.refresh = function () {
        return this.emit(EVENT_REFRESH), this;
      }),
      (e.destroy = function (t) {
        void 0 === t && (t = !0);
        var e = this.event,
          n = this.state;
        return (
          n.is(CREATED)
            ? EventInterface(this).on(EVENT_READY, this.destroy.bind(this, t))
            : (forOwn(
                this._C,
                function (e) {
                  e.destroy && e.destroy(t);
                },
                !0
              ),
              e.emit(EVENT_DESTROY),
              e.destroy(),
              t && empty(this.splides),
              n.set(DESTROYED)),
          this
        );
      }),
      _createClass(t, [
        {
          key: 'options',
          get: function () {
            return this._o;
          },
          set: function (t) {
            this._C.Media.set(t, !0, !0);
          },
        },
        {
          key: 'length',
          get: function () {
            return this._C.Slides.getLength(!0);
          },
        },
        {
          key: 'index',
          get: function () {
            return this._C.Controller.getIndex();
          },
        },
      ]),
      t
    );
  })(),
  Splide = _Splide;
(Splide.defaults = {}), (Splide.STATES = STATES);
var CLASS_RENDERED = 'is-rendered',
  RENDERER_DEFAULT_CONFIG = { listTag: 'ul', slideTag: 'li' },
  Style = (function () {
    function t(t, e) {
      (this.styles = {}), (this.id = t), (this.options = e);
    }
    var e = t.prototype;
    return (
      (e.rule = function (t, e, n, i) {
        i = i || 'default';
        var r = (this.styles[i] = this.styles[i] || {});
        (r[t] = r[t] || {})[e] = n;
      }),
      (e.build = function () {
        var t = this,
          e = '';
        return (
          this.styles.default && (e += this.buildSelectors(this.styles.default)),
          Object.keys(this.styles)
            .sort(function (e, n) {
              return 'min' === t.options.mediaQuery ? +e - +n : +n - +e;
            })
            .forEach(function (n) {
              'default' !== n &&
                ((e += '@media screen and (max-width: ' + n + 'px) {'),
                (e += t.buildSelectors(t.styles[n])),
                (e += '}'));
            }),
          e
        );
      }),
      (e.buildSelectors = function (t) {
        var e = this,
          n = '';
        return (
          forOwn(t, function (t, i) {
            (i = ('#' + e.id + ' ' + i).trim()),
              (n += i + ' {'),
              forOwn(t, function (t, e) {
                (t || 0 === t) && (n += e + ': ' + t + ';');
              }),
              (n += '}');
          }),
          n
        );
      }),
      t
    );
  })(),
  SplideRenderer = (function () {
    function t(t, e, n, i) {
      (this.slides = []),
        (this.options = {}),
        (this.breakpoints = []),
        merge(DEFAULTS, i || {}),
        merge(merge(this.options, DEFAULTS), e || {}),
        (this.contents = t),
        (this.config = assign({}, RENDERER_DEFAULT_CONFIG, n || {})),
        (this.id = this.config.id || uniqueId('splide')),
        (this.Style = new Style(this.id, this.options)),
        (this.Direction = Direction(null, null, this.options)),
        assert(this.contents.length, 'Provide at least 1 content.'),
        this.init();
    }
    t.clean = function (t) {
      var e = EventInterface(t).on,
        n = t.root,
        i = queryAll(n, '.' + CLASS_CLONE);
      e(EVENT_MOUNTED, function () {
        remove(child(n, 'style'));
      }),
        remove(i);
    };
    var e = t.prototype;
    return (
      (e.init = function () {
        this.parseBreakpoints(),
          this.initSlides(),
          this.registerRootStyles(),
          this.registerTrackStyles(),
          this.registerSlideStyles(),
          this.registerListStyles();
      }),
      (e.initSlides = function () {
        var t = this;
        push(
          this.slides,
          this.contents.map(function (e, n) {
            ((e = isString(e) ? { html: e } : e).styles = e.styles || {}), (e.attrs = e.attrs || {}), t.cover(e);
            var i = t.options.classes.slide + ' ' + (0 === n ? CLASS_ACTIVE : '');
            return (
              assign(e.attrs, { class: (i + ' ' + (e.attrs.class || '')).trim(), style: t.buildStyles(e.styles) }), e
            );
          })
        ),
          this.isLoop() && this.generateClones(this.slides);
      }),
      (e.registerRootStyles = function () {
        var t = this;
        this.breakpoints.forEach(function (e) {
          var n = e[0],
            i = e[1];
          t.Style.rule(' ', 'max-width', unit(i.width), n);
        });
      }),
      (e.registerTrackStyles = function () {
        var t = this,
          e = this.Style,
          n = '.' + CLASS_TRACK;
        this.breakpoints.forEach(function (i) {
          var r = i[0],
            o = i[1];
          e.rule(n, t.resolve('paddingLeft'), t.cssPadding(o, !1), r),
            e.rule(n, t.resolve('paddingRight'), t.cssPadding(o, !0), r),
            e.rule(n, 'height', t.cssTrackHeight(o), r);
        });
      }),
      (e.registerListStyles = function () {
        var t = this,
          e = this.Style,
          n = '.' + CLASS_LIST;
        this.breakpoints.forEach(function (i) {
          var r = i[0],
            o = i[1];
          e.rule(n, 'transform', t.buildTranslate(o), r),
            t.cssSlideHeight(o) || e.rule(n, 'aspect-ratio', t.cssAspectRatio(o), r);
        });
      }),
      (e.registerSlideStyles = function () {
        var t = this,
          e = this.Style,
          n = '.' + CLASS_SLIDE;
        this.breakpoints.forEach(function (i) {
          var r = i[0],
            o = i[1];
          e.rule(n, 'width', t.cssSlideWidth(o), r),
            e.rule(n, 'height', t.cssSlideHeight(o) || '100%', r),
            e.rule(n, t.resolve('marginRight'), unit(o.gap) || '0px', r),
            e.rule(n + ' > img', 'display', o.cover ? 'none' : 'inline', r);
        });
      }),
      (e.buildTranslate = function (t) {
        var e = this.Direction,
          n = e.resolve,
          i = e.orient,
          r = [];
        return (
          r.push(this.cssOffsetClones(t)),
          r.push(this.cssOffsetGaps(t)),
          this.isCenter(t) && (r.push(this.buildCssValue(i(-50), '%')), r.push.apply(r, this.cssOffsetCenter(t))),
          r
            .filter(Boolean)
            .map(function (t) {
              return 'translate' + n('X') + '(' + t + ')';
            })
            .join(' ')
        );
      }),
      (e.cssOffsetClones = function (t) {
        var e = this.Direction,
          n = e.resolve,
          i = e.orient,
          r = this.getCloneCount();
        if (this.isFixedWidth(t)) {
          var o = this.parseCssValue(t[n('fixedWidth')]),
            s = o.value,
            a = o.unit;
          return this.buildCssValue(i(s) * r, a);
        }
        return i((100 * r) / t.perPage) + '%';
      }),
      (e.cssOffsetCenter = function (t) {
        var e = this.Direction,
          n = e.resolve,
          i = e.orient;
        if (this.isFixedWidth(t)) {
          var r = this.parseCssValue(t[n('fixedWidth')]),
            o = r.value,
            s = r.unit;
          return [this.buildCssValue(i(o / 2), s)];
        }
        var a = [],
          E = t.perPage,
          u = t.gap;
        if ((a.push(i(50 / E) + '%'), u)) {
          var c = this.parseCssValue(u),
            l = c.value,
            A = c.unit,
            S = (l / E - l) / 2;
          a.push(this.buildCssValue(i(S), A));
        }
        return a;
      }),
      (e.cssOffsetGaps = function (t) {
        var e = this.getCloneCount();
        if (e && t.gap) {
          var n = this.Direction.orient,
            i = this.parseCssValue(t.gap),
            r = i.value,
            o = i.unit;
          if (this.isFixedWidth(t)) return this.buildCssValue(n(r * e), o);
          var s = e / t.perPage;
          return this.buildCssValue(n(s * r), o);
        }
        return '';
      }),
      (e.resolve = function (t) {
        return camelToKebab(this.Direction.resolve(t));
      }),
      (e.cssPadding = function (t, e) {
        var n = t.padding,
          i = this.Direction.resolve(e ? 'right' : 'left', !0);
        return (n && unit(n[i] || (isObject(n) ? 0 : n))) || '0px';
      }),
      (e.cssTrackHeight = function (t) {
        var e = '';
        return (
          this.isVertical() &&
            (assert((e = this.cssHeight(t)), '"height" is missing.'),
            (e = 'calc(' + e + ' - ' + this.cssPadding(t, !1) + ' - ' + this.cssPadding(t, !0) + ')')),
          e
        );
      }),
      (e.cssHeight = function (t) {
        return unit(t.height);
      }),
      (e.cssSlideWidth = function (t) {
        return t.autoWidth ? '' : unit(t.fixedWidth) || (this.isVertical() ? '' : this.cssSlideSize(t));
      }),
      (e.cssSlideHeight = function (t) {
        return (
          unit(t.fixedHeight) || (this.isVertical() ? (t.autoHeight ? '' : this.cssSlideSize(t)) : this.cssHeight(t))
        );
      }),
      (e.cssSlideSize = function (t) {
        var e = unit(t.gap);
        return 'calc((100%' + (e && ' + ' + e) + ')/' + (t.perPage || 1) + (e && ' - ' + e) + ')';
      }),
      (e.cssAspectRatio = function (t) {
        var e = t.heightRatio;
        return e ? '' + 1 / e : '';
      }),
      (e.buildCssValue = function (t, e) {
        return '' + t + e;
      }),
      (e.parseCssValue = function (t) {
        return isString(t)
          ? { value: parseFloat(t) || 0, unit: t.replace(/\d*(\.\d*)?/, '') || 'px' }
          : { value: t, unit: 'px' };
      }),
      (e.parseBreakpoints = function () {
        var t = this,
          e = this.options.breakpoints;
        this.breakpoints.push(['default', this.options]),
          e &&
            forOwn(e, function (e, n) {
              t.breakpoints.push([n, merge(merge({}, t.options), e)]);
            });
      }),
      (e.isFixedWidth = function (t) {
        return !!t[this.Direction.resolve('fixedWidth')];
      }),
      (e.isLoop = function () {
        return this.options.type === LOOP;
      }),
      (e.isCenter = function (t) {
        if ('center' === t.focus) {
          if (this.isLoop()) return !0;
          if (this.options.type === SLIDE) return !this.options.trimSpace;
        }
        return !1;
      }),
      (e.isVertical = function () {
        return this.options.direction === TTB;
      }),
      (e.buildClasses = function () {
        var t = this.options;
        return [
          CLASS_ROOT,
          CLASS_ROOT + '--' + t.type,
          CLASS_ROOT + '--' + t.direction,
          t.drag && CLASS_ROOT + '--draggable',
          t.isNavigation && CLASS_ROOT + '--nav',
          CLASS_ACTIVE,
          !this.config.hidden && CLASS_RENDERED,
        ]
          .filter(Boolean)
          .join(' ');
      }),
      (e.buildAttrs = function (t) {
        var e = '';
        return (
          forOwn(t, function (t, n) {
            e += t ? ' ' + camelToKebab(n) + '="' + t + '"' : '';
          }),
          e.trim()
        );
      }),
      (e.buildStyles = function (t) {
        var e = '';
        return (
          forOwn(t, function (t, n) {
            e += ' ' + camelToKebab(n) + ':' + t + ';';
          }),
          e.trim()
        );
      }),
      (e.renderSlides = function () {
        var t = this,
          e = this.config.slideTag;
        return this.slides
          .map(function (n) {
            return '<' + e + ' ' + t.buildAttrs(n.attrs) + '>' + (n.html || '') + '</' + e + '>';
          })
          .join('');
      }),
      (e.cover = function (t) {
        var e = t.styles,
          n = t.html,
          i = void 0 === n ? '' : n;
        if (this.options.cover && !this.options.lazyLoad) {
          var r = i.match(/<img.*?src\s*=\s*(['"])(.+?)\1.*?>/);
          r && r[2] && (e.background = "center/cover no-repeat url('" + r[2] + "')");
        }
      }),
      (e.generateClones = function (t) {
        for (var e = this.options.classes, n = this.getCloneCount(), i = t.slice(); i.length < n; ) push(i, i);
        push(i.slice(-n).reverse(), i.slice(0, n)).forEach(function (i, r) {
          var o = assign({}, i.attrs, { class: i.attrs.class + ' ' + e.clone }),
            s = assign({}, i, { attrs: o });
          r < n ? t.unshift(s) : t.push(s);
        });
      }),
      (e.getCloneCount = function () {
        if (this.isLoop()) {
          var t = this.options;
          return t.clones
            ? t.clones
            : max.apply(
                void 0,
                this.breakpoints.map(function (t) {
                  return t[1].perPage;
                })
              ) *
                ((t.flickMaxPages || 1) + 1);
        }
        return 0;
      }),
      (e.renderArrows = function () {
        var t = '';
        return (
          (t += '<div class="' + this.options.classes.arrows + '">'),
          (t += this.renderArrow(!0)),
          (t += this.renderArrow(!1)),
          (t += '</div>')
        );
      }),
      (e.renderArrow = function (t) {
        var e = this.options,
          n = e.classes,
          i = e.i18n,
          r = { class: n.arrow + ' ' + (t ? n.prev : n.next), type: 'button', ariaLabel: t ? i.prev : i.next };
        return (
          '<button ' +
          this.buildAttrs(r) +
          '><svg xmlns="' +
          XML_NAME_SPACE +
          '" viewBox="0 0 ' +
          SIZE +
          ' ' +
          SIZE +
          '" width="' +
          SIZE +
          '" height="' +
          SIZE +
          '"><path d="' +
          (this.options.arrowPath || PATH) +
          '" /></svg></button>'
        );
      }),
      (e.html = function () {
        var t = this.config,
          e = t.rootClass,
          n = t.listTag,
          i = t.arrows,
          r = t.beforeTrack,
          o = t.afterTrack,
          s = t.slider,
          a = t.beforeSlider,
          E = t.afterSlider,
          u = '';
        return (
          (u += '<div id="' + this.id + '" class="' + this.buildClasses() + ' ' + (e || '') + '">'),
          (u += '<style>' + this.Style.build() + '</style>'),
          s && ((u += a || ''), (u += '<div class="splide__slider">')),
          (u += r || ''),
          i && (u += this.renderArrows()),
          (u += '<div class="splide__track">'),
          (u += '<' + n + ' class="splide__list">'),
          (u += this.renderSlides()),
          (u += '</' + n + '>'),
          (u += '</div>'),
          (u += o || ''),
          s && ((u += '</div>'), (u += E || '')),
          (u += '</div>'),
          u
        );
      }),
      t
    );
  })();
export {
  CLASSES,
  CLASS_ACTIVE,
  CLASS_ARROW,
  CLASS_ARROWS,
  CLASS_ARROW_NEXT,
  CLASS_ARROW_PREV,
  CLASS_CLONE,
  CLASS_CONTAINER,
  CLASS_FOCUS_IN,
  CLASS_INITIALIZED,
  CLASS_LIST,
  CLASS_LOADING,
  CLASS_NEXT,
  CLASS_OVERFLOW,
  CLASS_PAGINATION,
  CLASS_PAGINATION_PAGE,
  CLASS_PREV,
  CLASS_PROGRESS,
  CLASS_PROGRESS_BAR,
  CLASS_ROOT,
  CLASS_SLIDE,
  CLASS_SPINNER,
  CLASS_SR,
  CLASS_TOGGLE,
  CLASS_TOGGLE_PAUSE,
  CLASS_TOGGLE_PLAY,
  CLASS_TRACK,
  CLASS_VISIBLE,
  DEFAULTS,
  EVENT_ACTIVE,
  EVENT_ARROWS_MOUNTED,
  EVENT_ARROWS_UPDATED,
  EVENT_AUTOPLAY_PAUSE,
  EVENT_AUTOPLAY_PLAY,
  EVENT_AUTOPLAY_PLAYING,
  EVENT_CLICK,
  EVENT_DESTROY,
  EVENT_DRAG,
  EVENT_DRAGGED,
  EVENT_DRAGGING,
  EVENT_END_INDEX_CHANGED,
  EVENT_HIDDEN,
  EVENT_INACTIVE,
  EVENT_LAZYLOAD_LOADED,
  EVENT_MOUNTED,
  EVENT_MOVE,
  EVENT_MOVED,
  EVENT_NAVIGATION_MOUNTED,
  EVENT_OVERFLOW,
  EVENT_PAGINATION_MOUNTED,
  EVENT_PAGINATION_UPDATED,
  EVENT_READY,
  EVENT_REFRESH,
  EVENT_RESIZE,
  EVENT_RESIZED,
  EVENT_SCROLL,
  EVENT_SCROLLED,
  EVENT_SHIFTED,
  EVENT_SLIDE_KEYDOWN,
  EVENT_UPDATED,
  EVENT_VISIBLE,
  EventBinder,
  EventInterface,
  FADE,
  LOOP,
  LTR,
  RTL,
  RequestInterval,
  SLIDE,
  STATUS_CLASSES,
  Splide,
  SplideRenderer,
  State,
  TTB,
  Throttle,
  Splide as default,
};
//# sourceMappingURL=/sm/5c3dd912d19ae71c98429f06dd8581de2cb1f0cc1284859496c4101349babb9c.map
